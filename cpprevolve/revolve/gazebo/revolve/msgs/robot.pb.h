// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "body.pb.h"
#include "neural_net.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2eproto;
namespace revolve {
namespace msgs {
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> ::revolve::msgs::Robot* Arena::CreateMaybeMessage<::revolve::msgs::Robot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace revolve {
namespace msgs {

// ===================================================================

class Robot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {}
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2eproto);
    return ::descriptor_table_robot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kBrainFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required .revolve.msgs.Body body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::revolve::msgs::Body& body() const;
  ::revolve::msgs::Body* release_body();
  ::revolve::msgs::Body* mutable_body();
  void set_allocated_body(::revolve::msgs::Body* body);
  private:
  const ::revolve::msgs::Body& _internal_body() const;
  ::revolve::msgs::Body* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::revolve::msgs::Body* body);
  ::revolve::msgs::Body* unsafe_arena_release_body();

  // required .revolve.msgs.NeuralNetwork brain = 3;
  bool has_brain() const;
  private:
  bool _internal_has_brain() const;
  public:
  void clear_brain();
  const ::revolve::msgs::NeuralNetwork& brain() const;
  ::revolve::msgs::NeuralNetwork* release_brain();
  ::revolve::msgs::NeuralNetwork* mutable_brain();
  void set_allocated_brain(::revolve::msgs::NeuralNetwork* brain);
  private:
  const ::revolve::msgs::NeuralNetwork& _internal_brain() const;
  ::revolve::msgs::NeuralNetwork* _internal_mutable_brain();
  public:
  void unsafe_arena_set_allocated_brain(
      ::revolve::msgs::NeuralNetwork* brain);
  ::revolve::msgs::NeuralNetwork* unsafe_arena_release_brain();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.Robot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::revolve::msgs::Body* body_;
  ::revolve::msgs::NeuralNetwork* brain_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_robot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot

// required int32 id = 1;
inline bool Robot::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Robot::has_id() const {
  return _internal_has_id();
}
inline void Robot::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.id)
  return _internal_id();
}
inline void Robot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Robot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Robot.id)
}

// required .revolve.msgs.Body body = 2;
inline bool Robot::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool Robot::has_body() const {
  return _internal_has_body();
}
inline const ::revolve::msgs::Body& Robot::_internal_body() const {
  const ::revolve::msgs::Body* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::revolve::msgs::Body*>(
      &::revolve::msgs::_Body_default_instance_);
}
inline const ::revolve::msgs::Body& Robot::body() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.body)
  return _internal_body();
}
inline void Robot::unsafe_arena_set_allocated_body(
    ::revolve::msgs::Body* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Robot.body)
}
inline ::revolve::msgs::Body* Robot::release_body() {
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::Body* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::revolve::msgs::Body* Robot::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Robot.body)
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::Body* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::revolve::msgs::Body* Robot::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::Body>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::revolve::msgs::Body* Robot::mutable_body() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Robot.body)
  return _internal_mutable_body();
}
inline void Robot::set_allocated_body(::revolve::msgs::Body* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body)->GetArena();
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Robot.body)
}

// required .revolve.msgs.NeuralNetwork brain = 3;
inline bool Robot::_internal_has_brain() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || brain_ != nullptr);
  return value;
}
inline bool Robot::has_brain() const {
  return _internal_has_brain();
}
inline const ::revolve::msgs::NeuralNetwork& Robot::_internal_brain() const {
  const ::revolve::msgs::NeuralNetwork* p = brain_;
  return p != nullptr ? *p : *reinterpret_cast<const ::revolve::msgs::NeuralNetwork*>(
      &::revolve::msgs::_NeuralNetwork_default_instance_);
}
inline const ::revolve::msgs::NeuralNetwork& Robot::brain() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Robot.brain)
  return _internal_brain();
}
inline void Robot::unsafe_arena_set_allocated_brain(
    ::revolve::msgs::NeuralNetwork* brain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brain_);
  }
  brain_ = brain;
  if (brain) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Robot.brain)
}
inline ::revolve::msgs::NeuralNetwork* Robot::release_brain() {
  _has_bits_[0] &= ~0x00000002u;
  ::revolve::msgs::NeuralNetwork* temp = brain_;
  brain_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::revolve::msgs::NeuralNetwork* Robot::unsafe_arena_release_brain() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Robot.brain)
  _has_bits_[0] &= ~0x00000002u;
  ::revolve::msgs::NeuralNetwork* temp = brain_;
  brain_ = nullptr;
  return temp;
}
inline ::revolve::msgs::NeuralNetwork* Robot::_internal_mutable_brain() {
  _has_bits_[0] |= 0x00000002u;
  if (brain_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::NeuralNetwork>(GetArena());
    brain_ = p;
  }
  return brain_;
}
inline ::revolve::msgs::NeuralNetwork* Robot::mutable_brain() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Robot.brain)
  return _internal_mutable_brain();
}
inline void Robot::set_allocated_brain(::revolve::msgs::NeuralNetwork* brain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brain_);
  }
  if (brain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brain)->GetArena();
    if (message_arena != submessage_arena) {
      brain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brain, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  brain_ = brain;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Robot.brain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_2eproto
