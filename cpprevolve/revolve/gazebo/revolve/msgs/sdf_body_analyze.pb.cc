// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdf_body_analyze.proto

#include "sdf_body_analyze.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdf_5fbody_5fanalyze_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdf_5fbody_5fanalyze_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contact_sdf_5fbody_5fanalyze_2eproto;
namespace revolve {
namespace msgs {
class ContactDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contact> _instance;
} _Contact_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class BodyAnalysisResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyAnalysisResponse> _instance;
} _BodyAnalysisResponse_default_instance_;
}  // namespace msgs
}  // namespace revolve
static void InitDefaultsscc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_BodyAnalysisResponse_default_instance_;
    new (ptr) ::revolve::msgs::BodyAnalysisResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::BodyAnalysisResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto}, {
      &scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto.base,
      &scc_info_Contact_sdf_5fbody_5fanalyze_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_BoundingBox_default_instance_;
    new (ptr) ::revolve::msgs::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static void InitDefaultsscc_info_Contact_sdf_5fbody_5fanalyze_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::revolve::msgs::_Contact_default_instance_;
    new (ptr) ::revolve::msgs::Contact();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::revolve::msgs::Contact::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contact_sdf_5fbody_5fanalyze_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Contact_sdf_5fbody_5fanalyze_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdf_5fbody_5fanalyze_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sdf_5fbody_5fanalyze_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdf_5fbody_5fanalyze_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdf_5fbody_5fanalyze_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Contact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Contact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Contact, collision1_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Contact, collision2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BoundingBox, min_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BoundingBox, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BodyAnalysisResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BodyAnalysisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BodyAnalysisResponse, boundingbox_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::BodyAnalysisResponse, contact_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::revolve::msgs::Contact)},
  { 9, 16, sizeof(::revolve::msgs::BoundingBox)},
  { 18, 25, sizeof(::revolve::msgs::BodyAnalysisResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_Contact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_BodyAnalysisResponse_default_instance_),
};

const char descriptor_table_protodef_sdf_5fbody_5fanalyze_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026sdf_body_analyze.proto\022\014revolve.msgs\032\016"
  "vector3d.proto\"1\n\007Contact\022\022\n\ncollision1\030"
  "\001 \002(\t\022\022\n\ncollision2\030\002 \002(\t\"U\n\013BoundingBox"
  "\022\"\n\003min\030\001 \002(\0132\025.gazebo.msgs.Vector3d\022\"\n\003"
  "max\030\002 \002(\0132\025.gazebo.msgs.Vector3d\"n\n\024Body"
  "AnalysisResponse\022.\n\013boundingBox\030\001 \001(\0132\031."
  "revolve.msgs.BoundingBox\022&\n\007contact\030\002 \003("
  "\0132\025.revolve.msgs.Contact"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdf_5fbody_5fanalyze_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sdf_5fbody_5fanalyze_2eproto_sccs[3] = {
  &scc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto.base,
  &scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto.base,
  &scc_info_Contact_sdf_5fbody_5fanalyze_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdf_5fbody_5fanalyze_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdf_5fbody_5fanalyze_2eproto = {
  false, false, descriptor_table_protodef_sdf_5fbody_5fanalyze_2eproto, "sdf_body_analyze.proto", 304,
  &descriptor_table_sdf_5fbody_5fanalyze_2eproto_once, descriptor_table_sdf_5fbody_5fanalyze_2eproto_sccs, descriptor_table_sdf_5fbody_5fanalyze_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_sdf_5fbody_5fanalyze_2eproto::offsets,
  file_level_metadata_sdf_5fbody_5fanalyze_2eproto, 3, file_level_enum_descriptors_sdf_5fbody_5fanalyze_2eproto, file_level_service_descriptors_sdf_5fbody_5fanalyze_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sdf_5fbody_5fanalyze_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sdf_5fbody_5fanalyze_2eproto)), true);
namespace revolve {
namespace msgs {

// ===================================================================

void Contact::InitAsDefaultInstance() {
}
class Contact::_Internal {
 public:
  using HasBits = decltype(std::declval<Contact>()._has_bits_);
  static void set_has_collision1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collision2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Contact::Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.Contact)
}
Contact::Contact(const Contact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collision1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collision1()) {
    collision1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collision1(),
      GetArena());
  }
  collision2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collision2()) {
    collision2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collision2(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Contact)
}

void Contact::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contact_sdf_5fbody_5fanalyze_2eproto.base);
  collision1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collision2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Contact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collision1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collision2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contact::ArenaDtor(void* object) {
  Contact* _this = reinterpret_cast< Contact* >(object);
  (void)_this;
}
void Contact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contact& Contact::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contact_sdf_5fbody_5fanalyze_2eproto.base);
  return *internal_default_instance();
}


void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Contact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      collision1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      collision2_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string collision1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collision1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "revolve.msgs.Contact.collision1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string collision2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collision2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "revolve.msgs.Contact.collision2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Contact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string collision1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collision1().data(), static_cast<int>(this->_internal_collision1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Contact.collision1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collision1(), target);
  }

  // required string collision2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collision2().data(), static_cast<int>(this->_internal_collision2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "revolve.msgs.Contact.collision2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collision2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Contact)
  return target;
}

size_t Contact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.Contact)
  size_t total_size = 0;

  if (_internal_has_collision1()) {
    // required string collision1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collision1());
  }

  if (_internal_has_collision2()) {
    // required string collision2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collision2());
  }

  return total_size;
}
size_t Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Contact)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string collision1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collision1());

    // required string collision2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collision2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  const Contact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.Contact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.Contact)
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_collision1(from._internal_collision1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_collision2(from._internal_collision2());
    }
  }
}

void Contact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Contact::InternalSwap(Contact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  collision1_.Swap(&other->collision1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collision2_.Swap(&other->collision2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Contact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
  ::revolve::msgs::_BoundingBox_default_instance_._instance.get_mutable()->min_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::revolve::msgs::_BoundingBox_default_instance_._instance.get_mutable()->max_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class BoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundingBox>()._has_bits_);
  static const ::gazebo::msgs::Vector3d& min(const BoundingBox* msg);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Vector3d& max(const BoundingBox* msg);
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::gazebo::msgs::Vector3d&
BoundingBox::_Internal::min(const BoundingBox* msg) {
  return *msg->min_;
}
const ::gazebo::msgs::Vector3d&
BoundingBox::_Internal::max(const BoundingBox* msg) {
  return *msg->max_;
}
void BoundingBox::clear_min() {
  if (min_ != nullptr) min_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void BoundingBox::clear_max() {
  if (max_ != nullptr) max_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new ::gazebo::msgs::Vector3d(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::gazebo::msgs::Vector3d(*from.max_);
  } else {
    max_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:revolve.msgs.BoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_sdf_5fbody_5fanalyze_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(min_ != nullptr);
      min_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(max_ != nullptr);
      max_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Vector3d min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.BoundingBox)
  return target;
}

size_t BoundingBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.BoundingBox)
  size_t total_size = 0;

  if (_internal_has_min()) {
    // required .gazebo.msgs.Vector3d min = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);
  }

  if (_internal_has_max()) {
    // required .gazebo.msgs.Vector3d max = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  return total_size;
}
size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.BoundingBox)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d min = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);

    // required .gazebo.msgs.Vector3d max = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_min()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_min());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_max()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_max());
    }
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_min()) {
    if (!min_->IsInitialized()) return false;
  }
  if (_internal_has_max()) {
    if (!max_->IsInitialized()) return false;
  }
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, max_)
      + sizeof(BoundingBox::max_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyAnalysisResponse::InitAsDefaultInstance() {
  ::revolve::msgs::_BodyAnalysisResponse_default_instance_._instance.get_mutable()->boundingbox_ = const_cast< ::revolve::msgs::BoundingBox*>(
      ::revolve::msgs::BoundingBox::internal_default_instance());
}
class BodyAnalysisResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BodyAnalysisResponse>()._has_bits_);
  static const ::revolve::msgs::BoundingBox& boundingbox(const BodyAnalysisResponse* msg);
  static void set_has_boundingbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::revolve::msgs::BoundingBox&
BodyAnalysisResponse::_Internal::boundingbox(const BodyAnalysisResponse* msg) {
  return *msg->boundingbox_;
}
BodyAnalysisResponse::BodyAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contact_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.BodyAnalysisResponse)
}
BodyAnalysisResponse::BodyAnalysisResponse(const BodyAnalysisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contact_(from.contact_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    boundingbox_ = new ::revolve::msgs::BoundingBox(*from.boundingbox_);
  } else {
    boundingbox_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.BodyAnalysisResponse)
}

void BodyAnalysisResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto.base);
  boundingbox_ = nullptr;
}

BodyAnalysisResponse::~BodyAnalysisResponse() {
  // @@protoc_insertion_point(destructor:revolve.msgs.BodyAnalysisResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyAnalysisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boundingbox_;
}

void BodyAnalysisResponse::ArenaDtor(void* object) {
  BodyAnalysisResponse* _this = reinterpret_cast< BodyAnalysisResponse* >(object);
  (void)_this;
}
void BodyAnalysisResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyAnalysisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyAnalysisResponse& BodyAnalysisResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyAnalysisResponse_sdf_5fbody_5fanalyze_2eproto.base);
  return *internal_default_instance();
}


void BodyAnalysisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.BodyAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contact_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(boundingbox_ != nullptr);
    boundingbox_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyAnalysisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .revolve.msgs.BoundingBox boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .revolve.msgs.Contact contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contact(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyAnalysisResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.BodyAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .revolve.msgs.BoundingBox boundingBox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boundingbox(this), target, stream);
  }

  // repeated .revolve.msgs.Contact contact = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contact_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contact(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.BodyAnalysisResponse)
  return target;
}

size_t BodyAnalysisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.BodyAnalysisResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .revolve.msgs.Contact contact = 2;
  total_size += 1UL * this->_internal_contact_size();
  for (const auto& msg : this->contact_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .revolve.msgs.BoundingBox boundingBox = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyAnalysisResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revolve.msgs.BodyAnalysisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyAnalysisResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyAnalysisResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revolve.msgs.BodyAnalysisResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revolve.msgs.BodyAnalysisResponse)
    MergeFrom(*source);
  }
}

void BodyAnalysisResponse::MergeFrom(const BodyAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.BodyAnalysisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contact_.MergeFrom(from.contact_);
  if (from._internal_has_boundingbox()) {
    _internal_mutable_boundingbox()->::revolve::msgs::BoundingBox::MergeFrom(from._internal_boundingbox());
  }
}

void BodyAnalysisResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revolve.msgs.BodyAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyAnalysisResponse::CopyFrom(const BodyAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.BodyAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyAnalysisResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(contact_)) return false;
  if (_internal_has_boundingbox()) {
    if (!boundingbox_->IsInitialized()) return false;
  }
  return true;
}

void BodyAnalysisResponse::InternalSwap(BodyAnalysisResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contact_.InternalSwap(&other->contact_);
  swap(boundingbox_, other->boundingbox_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyAnalysisResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::revolve::msgs::Contact* Arena::CreateMaybeMessage< ::revolve::msgs::Contact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::Contact >(arena);
}
template<> PROTOBUF_NOINLINE ::revolve::msgs::BoundingBox* Arena::CreateMaybeMessage< ::revolve::msgs::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::revolve::msgs::BodyAnalysisResponse* Arena::CreateMaybeMessage< ::revolve::msgs::BodyAnalysisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::BodyAnalysisResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
