// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdf_body_analyze.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdf_5fbody_5fanalyze_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdf_5fbody_5fanalyze_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdf_5fbody_5fanalyze_2eproto;
namespace revolve {
namespace msgs {
class BodyAnalysisResponse;
class BodyAnalysisResponseDefaultTypeInternal;
extern BodyAnalysisResponseDefaultTypeInternal _BodyAnalysisResponse_default_instance_;
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> ::revolve::msgs::BodyAnalysisResponse* Arena::CreateMaybeMessage<::revolve::msgs::BodyAnalysisResponse>(Arena*);
template<> ::revolve::msgs::BoundingBox* Arena::CreateMaybeMessage<::revolve::msgs::BoundingBox>(Arena*);
template<> ::revolve::msgs::Contact* Arena::CreateMaybeMessage<::revolve::msgs::Contact>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace revolve {
namespace msgs {

// ===================================================================

class Contact PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Contact) */ {
 public:
  inline Contact() : Contact(nullptr) {}
  virtual ~Contact();

  Contact(const Contact& from);
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }
  inline void Swap(Contact* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(nullptr);
  }

  Contact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.Contact";
  }
  protected:
  explicit Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdf_5fbody_5fanalyze_2eproto);
    return ::descriptor_table_sdf_5fbody_5fanalyze_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollision1FieldNumber = 1,
    kCollision2FieldNumber = 2,
  };
  // required string collision1 = 1;
  bool has_collision1() const;
  private:
  bool _internal_has_collision1() const;
  public:
  void clear_collision1();
  const std::string& collision1() const;
  void set_collision1(const std::string& value);
  void set_collision1(std::string&& value);
  void set_collision1(const char* value);
  void set_collision1(const char* value, size_t size);
  std::string* mutable_collision1();
  std::string* release_collision1();
  void set_allocated_collision1(std::string* collision1);
  private:
  const std::string& _internal_collision1() const;
  void _internal_set_collision1(const std::string& value);
  std::string* _internal_mutable_collision1();
  public:

  // required string collision2 = 2;
  bool has_collision2() const;
  private:
  bool _internal_has_collision2() const;
  public:
  void clear_collision2();
  const std::string& collision2() const;
  void set_collision2(const std::string& value);
  void set_collision2(std::string&& value);
  void set_collision2(const char* value);
  void set_collision2(const char* value, size_t size);
  std::string* mutable_collision2();
  std::string* release_collision2();
  void set_allocated_collision2(std::string* collision2);
  private:
  const std::string& _internal_collision2() const;
  void _internal_set_collision2(const std::string& value);
  std::string* _internal_mutable_collision2();
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.Contact)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collision1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collision2_;
  friend struct ::TableStruct_sdf_5fbody_5fanalyze_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {}
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const final {
    return CreateMaybeMessage<BoundingBox>(nullptr);
  }

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.BoundingBox";
  }
  protected:
  explicit BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdf_5fbody_5fanalyze_2eproto);
    return ::descriptor_table_sdf_5fbody_5fanalyze_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // required .gazebo.msgs.Vector3d min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::gazebo::msgs::Vector3d& min() const;
  ::gazebo::msgs::Vector3d* release_min();
  ::gazebo::msgs::Vector3d* mutable_min();
  void set_allocated_min(::gazebo::msgs::Vector3d* min);
  private:
  const ::gazebo::msgs::Vector3d& _internal_min() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::gazebo::msgs::Vector3d* min);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_min();

  // required .gazebo.msgs.Vector3d max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::gazebo::msgs::Vector3d& max() const;
  ::gazebo::msgs::Vector3d* release_max();
  ::gazebo::msgs::Vector3d* mutable_max();
  void set_allocated_max(::gazebo::msgs::Vector3d* max);
  private:
  const ::gazebo::msgs::Vector3d& _internal_max() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::gazebo::msgs::Vector3d* max);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:revolve.msgs.BoundingBox)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* min_;
  ::gazebo::msgs::Vector3d* max_;
  friend struct ::TableStruct_sdf_5fbody_5fanalyze_2eproto;
};
// -------------------------------------------------------------------

class BodyAnalysisResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BodyAnalysisResponse) */ {
 public:
  inline BodyAnalysisResponse() : BodyAnalysisResponse(nullptr) {}
  virtual ~BodyAnalysisResponse();

  BodyAnalysisResponse(const BodyAnalysisResponse& from);
  BodyAnalysisResponse(BodyAnalysisResponse&& from) noexcept
    : BodyAnalysisResponse() {
    *this = ::std::move(from);
  }

  inline BodyAnalysisResponse& operator=(const BodyAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyAnalysisResponse& operator=(BodyAnalysisResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyAnalysisResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const BodyAnalysisResponse*>(
               &_BodyAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BodyAnalysisResponse& a, BodyAnalysisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyAnalysisResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyAnalysisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyAnalysisResponse* New() const final {
    return CreateMaybeMessage<BodyAnalysisResponse>(nullptr);
  }

  BodyAnalysisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyAnalysisResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyAnalysisResponse& from);
  void MergeFrom(const BodyAnalysisResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyAnalysisResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.BodyAnalysisResponse";
  }
  protected:
  explicit BodyAnalysisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdf_5fbody_5fanalyze_2eproto);
    return ::descriptor_table_sdf_5fbody_5fanalyze_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactFieldNumber = 2,
    kBoundingBoxFieldNumber = 1,
  };
  // repeated .revolve.msgs.Contact contact = 2;
  int contact_size() const;
  private:
  int _internal_contact_size() const;
  public:
  void clear_contact();
  ::revolve::msgs::Contact* mutable_contact(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Contact >*
      mutable_contact();
  private:
  const ::revolve::msgs::Contact& _internal_contact(int index) const;
  ::revolve::msgs::Contact* _internal_add_contact();
  public:
  const ::revolve::msgs::Contact& contact(int index) const;
  ::revolve::msgs::Contact* add_contact();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Contact >&
      contact() const;

  // optional .revolve.msgs.BoundingBox boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::revolve::msgs::BoundingBox& boundingbox() const;
  ::revolve::msgs::BoundingBox* release_boundingbox();
  ::revolve::msgs::BoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::revolve::msgs::BoundingBox* boundingbox);
  private:
  const ::revolve::msgs::BoundingBox& _internal_boundingbox() const;
  ::revolve::msgs::BoundingBox* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::revolve::msgs::BoundingBox* boundingbox);
  ::revolve::msgs::BoundingBox* unsafe_arena_release_boundingbox();

  // @@protoc_insertion_point(class_scope:revolve.msgs.BodyAnalysisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Contact > contact_;
  ::revolve::msgs::BoundingBox* boundingbox_;
  friend struct ::TableStruct_sdf_5fbody_5fanalyze_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// required string collision1 = 1;
inline bool Contact::_internal_has_collision1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Contact::has_collision1() const {
  return _internal_has_collision1();
}
inline void Contact::clear_collision1() {
  collision1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Contact::collision1() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Contact.collision1)
  return _internal_collision1();
}
inline void Contact::set_collision1(const std::string& value) {
  _internal_set_collision1(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Contact.collision1)
}
inline std::string* Contact::mutable_collision1() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Contact.collision1)
  return _internal_mutable_collision1();
}
inline const std::string& Contact::_internal_collision1() const {
  return collision1_.Get();
}
inline void Contact::_internal_set_collision1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  collision1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_collision1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  collision1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  collision1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Contact.collision1)
}
inline void Contact::set_collision1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  collision1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Contact.collision1)
}
inline std::string* Contact::_internal_mutable_collision1() {
  _has_bits_[0] |= 0x00000001u;
  return collision1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_collision1() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Contact.collision1)
  if (!_internal_has_collision1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return collision1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_collision1(std::string* collision1) {
  if (collision1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collision1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collision1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Contact.collision1)
}

// required string collision2 = 2;
inline bool Contact::_internal_has_collision2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Contact::has_collision2() const {
  return _internal_has_collision2();
}
inline void Contact::clear_collision2() {
  collision2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Contact::collision2() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Contact.collision2)
  return _internal_collision2();
}
inline void Contact::set_collision2(const std::string& value) {
  _internal_set_collision2(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.Contact.collision2)
}
inline std::string* Contact::mutable_collision2() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Contact.collision2)
  return _internal_mutable_collision2();
}
inline const std::string& Contact::_internal_collision2() const {
  return collision2_.Get();
}
inline void Contact::_internal_set_collision2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  collision2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Contact::set_collision2(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  collision2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:revolve.msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  collision2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:revolve.msgs.Contact.collision2)
}
inline void Contact::set_collision2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  collision2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.Contact.collision2)
}
inline std::string* Contact::_internal_mutable_collision2() {
  _has_bits_[0] |= 0x00000002u;
  return collision2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Contact::release_collision2() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Contact.collision2)
  if (!_internal_has_collision2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return collision2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Contact::set_allocated_collision2(std::string* collision2) {
  if (collision2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  collision2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collision2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Contact.collision2)
}

// -------------------------------------------------------------------

// BoundingBox

// required .gazebo.msgs.Vector3d min = 1;
inline bool BoundingBox::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || min_ != nullptr);
  return value;
}
inline bool BoundingBox::has_min() const {
  return _internal_has_min();
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::_internal_min() const {
  const ::gazebo::msgs::Vector3d* p = min_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::min() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BoundingBox.min)
  return _internal_min();
}
inline void BoundingBox::unsafe_arena_set_allocated_min(
    ::gazebo::msgs::Vector3d* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.BoundingBox.min)
}
inline ::gazebo::msgs::Vector3d* BoundingBox::release_min() {
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = min_;
  min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BoundingBox.min)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::_internal_mutable_min() {
  _has_bits_[0] |= 0x00000001u;
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::mutable_min() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BoundingBox.min)
  return _internal_mutable_min();
}
inline void BoundingBox::set_allocated_min(::gazebo::msgs::Vector3d* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min)->GetArena();
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BoundingBox.min)
}

// required .gazebo.msgs.Vector3d max = 2;
inline bool BoundingBox::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || max_ != nullptr);
  return value;
}
inline bool BoundingBox::has_max() const {
  return _internal_has_max();
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::_internal_max() const {
  const ::gazebo::msgs::Vector3d* p = max_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& BoundingBox::max() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BoundingBox.max)
  return _internal_max();
}
inline void BoundingBox::unsafe_arena_set_allocated_max(
    ::gazebo::msgs::Vector3d* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.BoundingBox.max)
}
inline ::gazebo::msgs::Vector3d* BoundingBox::release_max() {
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = max_;
  max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BoundingBox.max)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::_internal_mutable_max() {
  _has_bits_[0] |= 0x00000002u;
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::gazebo::msgs::Vector3d* BoundingBox::mutable_max() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BoundingBox.max)
  return _internal_mutable_max();
}
inline void BoundingBox::set_allocated_max(::gazebo::msgs::Vector3d* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max)->GetArena();
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BoundingBox.max)
}

// -------------------------------------------------------------------

// BodyAnalysisResponse

// optional .revolve.msgs.BoundingBox boundingBox = 1;
inline bool BodyAnalysisResponse::_internal_has_boundingbox() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || boundingbox_ != nullptr);
  return value;
}
inline bool BodyAnalysisResponse::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void BodyAnalysisResponse::clear_boundingbox() {
  if (boundingbox_ != nullptr) boundingbox_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::revolve::msgs::BoundingBox& BodyAnalysisResponse::_internal_boundingbox() const {
  const ::revolve::msgs::BoundingBox* p = boundingbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::revolve::msgs::BoundingBox*>(
      &::revolve::msgs::_BoundingBox_default_instance_);
}
inline const ::revolve::msgs::BoundingBox& BodyAnalysisResponse::boundingbox() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyAnalysisResponse.boundingBox)
  return _internal_boundingbox();
}
inline void BodyAnalysisResponse::unsafe_arena_set_allocated_boundingbox(
    ::revolve::msgs::BoundingBox* boundingbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  boundingbox_ = boundingbox;
  if (boundingbox) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.BodyAnalysisResponse.boundingBox)
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::release_boundingbox() {
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BoundingBox* temp = boundingbox_;
  boundingbox_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyAnalysisResponse.boundingBox)
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BoundingBox* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::_internal_mutable_boundingbox() {
  _has_bits_[0] |= 0x00000001u;
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::BoundingBox>(GetArena());
    boundingbox_ = p;
  }
  return boundingbox_;
}
inline ::revolve::msgs::BoundingBox* BodyAnalysisResponse::mutable_boundingbox() {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyAnalysisResponse.boundingBox)
  return _internal_mutable_boundingbox();
}
inline void BodyAnalysisResponse::set_allocated_boundingbox(::revolve::msgs::BoundingBox* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyAnalysisResponse.boundingBox)
}

// repeated .revolve.msgs.Contact contact = 2;
inline int BodyAnalysisResponse::_internal_contact_size() const {
  return contact_.size();
}
inline int BodyAnalysisResponse::contact_size() const {
  return _internal_contact_size();
}
inline void BodyAnalysisResponse::clear_contact() {
  contact_.Clear();
}
inline ::revolve::msgs::Contact* BodyAnalysisResponse::mutable_contact(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Contact >*
BodyAnalysisResponse::mutable_contact() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.BodyAnalysisResponse.contact)
  return &contact_;
}
inline const ::revolve::msgs::Contact& BodyAnalysisResponse::_internal_contact(int index) const {
  return contact_.Get(index);
}
inline const ::revolve::msgs::Contact& BodyAnalysisResponse::contact(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyAnalysisResponse.contact)
  return _internal_contact(index);
}
inline ::revolve::msgs::Contact* BodyAnalysisResponse::_internal_add_contact() {
  return contact_.Add();
}
inline ::revolve::msgs::Contact* BodyAnalysisResponse::add_contact() {
  // @@protoc_insertion_point(field_add:revolve.msgs.BodyAnalysisResponse.contact)
  return _internal_add_contact();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Contact >&
BodyAnalysisResponse::contact() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.BodyAnalysisResponse.contact)
  return contact_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdf_5fbody_5fanalyze_2eproto
